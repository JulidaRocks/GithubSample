// <auto-generated />
using System;
using EFBugGithubSample.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFBugGithubSample.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20191014131834_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EFBugGithubSample.Domain.Badge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Hint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("RequiredValue")
                        .HasColumnType("real");

                    b.Property<Guid?>("StatId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("StatId");

                    b.ToTable("Badge");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c8ba004-21fa-4533-803e-096a80022ce9"),
                            Deleted = false,
                            Hint = "Hint",
                            Name = "Name",
                            RequiredValue = 1f,
                            StatId = new Guid("44e93117-dbad-47b2-bc8c-e672ea1fb5be")
                        });
                });

            modelBuilder.Entity("EFBugGithubSample.Domain.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<float>("RequiredPoints")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Level");

                    b.HasData(
                        new
                        {
                            Id = new Guid("94ad7946-3acc-4b54-80d6-954fff8802a4"),
                            Deleted = false,
                            Rank = 1,
                            RequiredPoints = 0f
                        });
                });

            modelBuilder.Entity("EFBugGithubSample.Domain.Stat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PointsPerValue")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Stat");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44e93117-dbad-47b2-bc8c-e672ea1fb5be"),
                            Deleted = false,
                            Name = "Name",
                            PointsPerValue = 1f
                        });
                });

            modelBuilder.Entity("EFBugGithubSample.Domain.StatEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("QueryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("QueryDate");

                    b.HasIndex("StatId");

                    b.HasIndex("UserId");

                    b.ToTable("StatEntry");
                });

            modelBuilder.Entity("EFBugGithubSample.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("ModifiedById");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1af91c5c-d954-4830-9c21-2ef87b0f133b"),
                            Deleted = false,
                            Email = "test@test.com",
                            Name = "Test User"
                        });
                });

            modelBuilder.Entity("EFBugGithubSample.Domain.UserAdvancement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AdvancementType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAdvancement");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UserAdvancement");
                });

            modelBuilder.Entity("EFBugGithubSample.Domain.UserBadgeAdvancement", b =>
                {
                    b.HasBaseType("EFBugGithubSample.Domain.UserAdvancement");

                    b.Property<Guid>("BadgeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("BadgeId");

                    b.HasDiscriminator().HasValue("UserBadgeAdvancement");
                });

            modelBuilder.Entity("EFBugGithubSample.Domain.UserLevelAdvancement", b =>
                {
                    b.HasBaseType("EFBugGithubSample.Domain.UserAdvancement");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("LevelId");

                    b.HasDiscriminator().HasValue("UserLevelAdvancement");

                    b.HasData(
                        new
                        {
                            Id = new Guid("94b1563d-6d42-4955-a822-f54439932719"),
                            AdvancementType = 1,
                            Date = new DateTime(2019, 10, 14, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = new Guid("1af91c5c-d954-4830-9c21-2ef87b0f133b"),
                            LevelId = new Guid("94ad7946-3acc-4b54-80d6-954fff8802a4")
                        });
                });

            modelBuilder.Entity("EFBugGithubSample.Domain.Badge", b =>
                {
                    b.HasOne("EFBugGithubSample.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("EFBugGithubSample.Domain.Stat", "Stat")
                        .WithMany("Badges")
                        .HasForeignKey("StatId");
                });

            modelBuilder.Entity("EFBugGithubSample.Domain.Level", b =>
                {
                    b.HasOne("EFBugGithubSample.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("EFBugGithubSample.Domain.Stat", b =>
                {
                    b.HasOne("EFBugGithubSample.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("EFBugGithubSample.Domain.StatEntry", b =>
                {
                    b.HasOne("EFBugGithubSample.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("EFBugGithubSample.Domain.Stat", "Stat")
                        .WithMany("StatEntries")
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFBugGithubSample.Domain.User", "User")
                        .WithMany("StatEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFBugGithubSample.Domain.User", b =>
                {
                    b.HasOne("EFBugGithubSample.Domain.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("EFBugGithubSample.Domain.UserAdvancement", b =>
                {
                    b.HasOne("EFBugGithubSample.Domain.User", "User")
                        .WithMany("Advancements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFBugGithubSample.Domain.UserBadgeAdvancement", b =>
                {
                    b.HasOne("EFBugGithubSample.Domain.Badge", "Badge")
                        .WithMany("UserAdvancements")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFBugGithubSample.Domain.UserLevelAdvancement", b =>
                {
                    b.HasOne("EFBugGithubSample.Domain.Level", "Level")
                        .WithMany("UserAdvancements")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
